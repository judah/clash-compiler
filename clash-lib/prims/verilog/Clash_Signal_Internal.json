[ { "BlackBox" :
    { "name" : "Clash.Signal.Internal.delay#"
    , "kind" : "Declaration"
    , "type" :
"delay#
  :: Undefined a              -- ARG[0]
  => Clock domain gated       -- ARG[1]
  -> a                        -- ARG[2]
  -> Signal clk a             -- ARG[3]
  -> Signal clk a"
    , "template" :
"// delay begin,
reg ~TYPO ~GENSYM[~RESULT_reg][0] = ~CONST[2];~IF ~ISGATED[1] ~THEN
always @(posedge ~ARG[1][1]) begin : ~GENSYM[~RESULT_delay][1]
  if (~ARG[1][0]) begin
    ~SYM[0] <= ~ARG[3];
  end
end~ELSE
always @(posedge ~ARG[1]) begin : ~SYM[1]
  ~SYM[0] <= ~ARG[3];
end~FI
assign ~RESULT = ~SYM[0];
// delay end"
    }
  }
, { "BlackBox" :
    { "name" : "Clash.Signal.Internal.register#"
    , "kind" : "Declaration"
    , "type" :
"register#
  :: Undefined a              -- ARG[0]
  => Clock domain gated       -- ARG[1]
  -> Reset domain synchronous -- ARG[2]
  -> a                        -- ARG[3] (powerup value)
  -> a                        -- ARG[4] (reset value)
  -> Signal clk a             -- ARG[5]
  -> Signal clk a"
    , "template" :
"// register begin
reg ~TYPO ~GENSYM[~RESULT_reg][0] = ~CONST[3];~IF ~ISGATED[1] ~THEN
always @(posedge ~ARG[1][1]~IF ~ISSYNC[2] ~THEN ~ELSE or posedge ~ARG[2]~FI) begin : ~GENSYM[~RESULT_register][1]
  if (~ARG[2]) begin
    ~SYM[0] <= ~CONST[4];
  end else if (~ARG[1][0]) begin
    ~SYM[0] <= ~ARG[5];
  end
end~ELSE
always @(posedge ~ARG[1]~IF ~ISSYNC[2] ~THEN ~ELSE or posedge ~ARG[2]~FI) begin : ~SYM[1]
  if (~ARG[2]) begin
    ~SYM[0] <= ~CONST[4];
  end else begin
    ~SYM[0] <= ~ARG[5];
  end
end~FI
assign ~RESULT = ~SYM[0];
// register end"
    }
  }
, { "BlackBox" :
    { "name"      : "Clash.Signal.Internal.clockGen"
    , "workInfo"  : "Always"
    , "kind" : "Declaration"
    , "warning" : "Clash.Signal.Internal.clockGen is not synthesizable!"
    , "type" :
"clockGen
  :: (domain ~ Dom nm period -- ARG[0]
     ,KnownSymbol nm         -- ARG[1]
     ,KnownNat period)       -- ARG[2]
  => Clock domain Source"
    , "template" :
"// pragma translate_off
reg ~TYPO ~GENSYM[clk][0];
// 1 = 0.1ps
localparam ~GENSYM[half_period][1] = (~LIT[2]0 / 2);
always begin
  ~SYM[0] = 0;
  #3000 forever begin
    ~SYM[0] = ~ ~SYM[0];
    #~SYM[1];
    ~SYM[0] = ~ ~SYM[0];
    #~SYM[1];
  end
end
assign ~RESULT = ~SYM[0];
// pragma translate_on"
    }
  }
, { "BlackBox" :
    { "name"      : "Clash.Signal.Internal.tbClockGen"
    , "workInfo"  : "Always"
    , "kind" : "Declaration"
    , "warning" : "Clash.Signal.Internal.tbClockGen is not synthesizable!"
    , "type" :
"tbClockGen
  :: (domain ~ Dom nm period -- ARG[0]
     ,KnownSymbol nm         -- ARG[1]
     ,KnownNat period)       -- ARG[2]
  => Signal domain Bool      -- ARG[3]
  -> Clock domain Source"
    , "template" :
"// pragma translate_off
reg ~TYPO ~GENSYM[clk][0];
// 1 = 0.1ps
localparam ~GENSYM[half_period][1] = (~LIT[2]0 / 2);
always begin
  ~SYM[0] = 0;
  #3000 forever begin
    if (~ ~ARG[3]) begin
      $finish;
    end
    ~SYM[0] = ~ ~SYM[0];
    #~SYM[1];
    ~SYM[0] = ~ ~SYM[0];
    #~SYM[1];
  end
end
assign ~RESULT = ~SYM[0];
// pragma translate_on"
    }
  }
, { "BlackBox" :
    { "name"      : "Clash.Signal.Internal.asyncResetGen"
    , "workInfo"  : "Always"
    , "kind" : "Declaration"
    , "type" :
"asyncResetGen :: Reset domain 'Asynchronous"
    , "template" :
"// pragma translate_off
reg ~TYPO ~GENSYM[rst][0];
initial begin
  #1    ~SYM[0] = 1;
  #3001 ~SYM[0] = 0;
end
assign ~RESULT = ~SYM[0];
// pragma translate_on"
    }
  }
, { "BlackBox" :
    { "name"      : "Clash.Signal.Internal.syncResetGen"
    , "workInfo"  : "Always"
    , "kind" : "Declaration"
    , "type" :
"asyncResetGen :: Reset domain 'Synchronous"
    , "template" :
"// pragma translate_off
reg ~TYPO ~GENSYM[rst][0];
localparam ~GENSYM[reset_period][1] = 2998 + ~LIT[1]0;
initial begin
  #1 ~SYM[0] = 1;
  #~SYM[1] ~SYM[0] = 0;
end
assign ~RESULT = ~SYM[0];
// pragma translate_on"
    }
  }
]
