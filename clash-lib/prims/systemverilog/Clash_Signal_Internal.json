[ { "BlackBox" :
    { "name" : "Clash.Signal.Internal.delay#"
    , "kind" : "Declaration"
    , "type" :
"delay#
  :: Undefined a              -- ARG[0]
  => Clock tag enabled       -- ARG[1]
  -> a                        -- ARG[2]
  -> Signal clk a             -- ARG[3]
  -> Signal clk a"
    , "template" :
"// delay begin,
~TYPO ~GENSYM[~RESULT_reg][0] = ~CONST[2];~IF ~ISENABLED[1] ~THEN
always_ff @(posedge ~ARG[1][1]) begin : ~GENSYM[~RESULT_delay][1]
  if (~ARG[1][0]) begin
    ~SYM[0] <= ~ARG[3];
  end
end~ELSE
always_ff @(posedge ~ARG[1]) begin : ~SYM[1]
  ~SYM[0] <= ~ARG[3];
end~FI
assign ~RESULT = ~SYM[0];
// delay end"
    }
  }
, { "BlackBox" :
    { "name" : "Clash.Signal.Internal.register#"
    , "kind" : "Declaration"
    , "type" :
"register#
  :: ( KnownDomain tag dom    -- ARG[0]
     , Undefined a )          -- ARG[1]
  => Clock tag enabled        -- ARG[2]
  -> Reset tag polarity       -- ARG[3]
  -> a                        -- ARG[4] (powerup value)
  -> a                        -- ARG[5] (reset value)
  -> Signal clk a             -- ARG[6]
  -> Signal clk a"
    , "template" :
"// register begin
~TYPO ~GENSYM[~RESULT_reg][0] = ~CONST[4];~IF ~ISENABLED[2] ~THEN
always_ff @(posedge ~ARG[2][1]~IF ~ISSYNC[0] ~THEN ~ELSE or posedge ~ARG[3]~FI) begin : ~GENSYM[~RESULT_register][1]
  if (~ARG[3]) begin
    ~SYM[0] <= ~CONST[5];
  end else if (~ARG[2][0]) begin
    ~SYM[0] <= ~ARG[6];
  end
end~ELSE
always_ff @(posedge ~ARG[2]~IF ~ISSYNC[0] ~THEN ~ELSE or posedge ~ARG[3]~FI) begin : ~SYM[1]
  if (~ARG[3]) begin
    ~SYM[0] <= ~CONST[5];
  end else begin
    ~SYM[0] <= ~ARG[6];
  end
end~FI
assign ~RESULT = ~SYM[0];
// register end"
    }
  }
, { "BlackBox" :
    { "name" : "Clash.Signal.Internal.clockGen"
    , "kind" : "Declaration"
    , "warning" : "Clash.Signal.Internal.clockGen is not synthesizable!"
    , "type" :
"clockGen
  :: (domain ~ Dom nm period -- ARG[0]
     ,KnownSymbol nm         -- ARG[1]
     ,KnownNat period)       -- ARG[2]
  => Clock tag Regular"
    , "template" :
"// pragma translate_off
// 1 = 0.1ps
localparam ~GENSYM[half_period][0] = (~LIT[2]0 / 2);
always begin
  ~RESULT = 0;
  #3000 forever begin
    ~RESULT = ~ ~RESULT;
    #~SYM[0];
    ~RESULT = ~ ~RESULT;
    #~SYM[0];
  end
end
// pragma translate_on"
    }
  }
, { "BlackBox" :
    { "name" : "Clash.Signal.Internal.tbClockGen"
    , "kind" : "Declaration"
    , "warning" : "Clash.Signal.Internal.tbClockGen is not synthesizable!"
    , "type" :
"tbClockGen
  :: (domain ~ Dom nm period -- ARG[0]
     ,KnownSymbol nm         -- ARG[1]
     ,KnownNat period)       -- ARG[2]
  => Signal tag Bool      -- ARG[3]
  -> Clock tag Regular"
    , "template" :
"// pragma translate_off
// 1 = 0.1ps
localparam ~GENSYM[half_period][0] = (~LIT[2]0 / 2);
always begin
  ~RESULT = 0;
  #3000 forever begin
    if (~ ~ARG[3]) begin
      $finish;
    end
    ~RESULT = ~ ~RESULT;
    #~SYM[0];
    ~RESULT = ~ ~RESULT;
    #~SYM[0];
  end
end
// pragma translate_on"
    }
  }
, { "BlackBox" :
    { "name" : "Clash.Signal.Internal.resetGen"
    , "kind" : "Declaration"
    , "type" : "resetGen :: KnownDomain tag conf => Reset tag 'ActiveHigh"
    , "template" :
"// pragma translate_off
~IF~ISSYNC[0]~THEN
localparam ~GENSYM[reset_period][1] = 2998 + ~LIT[1]0;
initial begin
  #1 ~RESULT = 1;
  #~SYM[1] ~RESULT = 0;
end
~ELSE
initial begin
  #1    ~RESULT = 1;
  #3001 ~RESULT = 0;
end
~FI
// pragma translate_on"
    }
  }
]
