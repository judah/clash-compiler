[ { "BlackBox" :
    { "name" : "Clash.Explicit.Testbench.assert"
    , "kind" : "Declaration"
    , "type" :
"assert
  :: (Eq a,ShowX a)           -- (ARG[0],ARG[1])
  => Clock tag enabled       -- ARG[2]
  -> Reset tag polarity -- ARG[3]
  -> String                   -- ARG[4]
  -> Signal tag a          -- Checked value (ARG[5])
  -> Signal tag a          -- Expected value (ARG[6])
  -> Signal tag b          -- Return valued (ARG[7])
  -> Signal tag b"
    , "template" :
"// assert begin
// pragma translate_off
always @(posedge ~IF ~ISENABLED[2] ~THEN ~ARG[2][1] ~ELSE ~ARG[2] ~FI~IF ~ISSYNC[3] ~THEN ~ELSE or negedge ~ARG[3]~FI) begin
  if (~ARG[5] !== ~ARG[6]) begin
    $display(\"@%0tns: %s, expected: %b, actual: %b\", $time, ~LIT[4], ~TOBV[~ARG[6]][~TYP[6]], ~TOBV[~ARG[5]][~TYP[5]]);
    $stop;
  end
end
// pragma translate_on
assign ~RESULT = ~ARG[7];
// assert end"
    }
  }
, { "BlackBox" :
    { "name" : "Clash.Explicit.Testbench.assertBitVector"
    , "kind" : "Declaration"
    , "type" :
"assertBitVector
  :: KnownNat n                  --                 ARG[0]
  => Clock tag enabled          --                 ARG[1]
  -> Reset tag polarity    --                 ARG[2]
  -> String                      --                 ARG[3]
  -> Signal tag (BitVector n) -- Checked value  (ARG[4])
  -> Signal tag (BitVector n) -- Expected value (ARG[5])
  -> Signal tag b             -- Return valued  (ARG[6])
  -> Signal tag b"
    , "template" :
"// assertBitVector begin
// pragma translate_off
wire ~TYP[5] ~GENSYM[maskXor][0]  = ~ARG[5] ^ ~ARG[5];
wire ~TYP[5] ~GENSYM[checked][1]  = ~ARG[4] ^ ~SYM[0];
wire ~TYP[5] ~GENSYM[expected][2] = ~ARG[5] ^ ~SYM[0];

always @(posedge ~IF ~ISENABLED[1] ~THEN ~ARG[1][1] ~ELSE ~ARG[1] ~FI~IF ~ISSYNC[2] ~THEN ~ELSE or negedge ~ARG[2]~FI) begin
  if (~SYM[1] !== ~SYM[2]) begin
    $display(\"@%0tns: %s, expected: %b, actual: %b\", $time, ~LIT[3], ~TOBV[~ARG[5]][~TYP[5]], ~TOBV[~ARG[4]][~TYP[4]]);
    $stop;
  end
end
// pragma translate_on
assign ~RESULT = ~ARG[6];
// assertBitVector end"
    }
  }
]
