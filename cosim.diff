diff --git a/Setup.hs b/Setup.hs
index f663060..f70e7b7 100644
--- a/Setup.hs
+++ b/Setup.hs
@@ -211,6 +211,7 @@ blackboxJson' clks args = blackboxObject bbname "" templateD
     where
       -- Offset where 'real' arguments start, instead of constraints
       argsOffset = 1 -- result constraint
+                 + 1 -- KnownDomain constraint
                  + args -- argument constraints
 
       -- Offset where signal arguments start
diff --git a/src/Clash/CoSim/CodeGeneration.hs b/src/Clash/CoSim/CodeGeneration.hs
index d25393d..7e18e5d 100644
--- a/src/Clash/CoSim/CodeGeneration.hs
+++ b/src/Clash/CoSim/CodeGeneration.hs
@@ -24,7 +24,7 @@ import Clash.CoSim.Paths_clash_cosim
 
 import Clash.Annotations.Primitive (Primitive(..), HDL(..))
 import Clash.CoSim.Types
-import Clash.Prelude (Clock, ClockKind (..), Signal)
+import Clash.Prelude (Clock, ClockKind (..), Signal, KnownDomain)
 import System.Environment (getEnv)
 import Language.Haskell.TH
 import Control.Monad (replicateM)
@@ -108,23 +108,24 @@ coSimTypeGen clks args = do
     let resultName = mkName "result"
     let result     = return $ VarT resultName
 
+    let tagName = mkName "tag"
+    let tag = return $ VarT tagName
+
     let domName = mkName "dom"
-    let dom     = return $ VarT domName
+    let dom = return $ VarT domName
 
     -- Generate contraints:
     argConstraints <- sequence $ map (\name -> [t| ClashType $name |]) argTypeNames
+    kdConstaint <- [t| KnownDomain $tag $dom |]
     resConstraint  <- [t| ClashType $result |]
-    let constraints = resConstraint : argConstraints
+    let constraints = kdConstaint : resConstraint : argConstraints
 
     -- Generate type:
     fixedArgs      <- sequence [[t| String |], [t| String |], [t| CoSimSettings |]]
-    clkSignalTypes <- sequence (replicate clks [t|Clock $dom 'Source|])
-    argSignalTypes <- sequence $ map (\name -> [t| Signal $dom $name |]) argTypeNames
-    resSignalType  <- [t| Signal $dom $result |]
+    clkSignalTypes <- sequence (replicate clks [t|Clock $tag 'Regular|])
+    argSignalTypes <- sequence $ map (\name -> [t| Signal $tag $name |]) argTypeNames
+    resSignalType  <- [t| Signal $tag $result |]
 
     let ctx = (fixedArgs ++ clkSignalTypes ++ argSignalTypes) `arrowsR` resSignalType
-    let varNames = resultName : domName : argNames
+    let varNames = domName : resultName : tagName : argNames
     return $ ForallT (map PlainTV varNames) constraints ctx
-
-
-
diff --git a/src/Clash/CoSim/Simulator.hs b/src/Clash/CoSim/Simulator.hs
index 16d2977..ff02375 100755
--- a/src/Clash/CoSim/Simulator.hs
+++ b/src/Clash/CoSim/Simulator.hs
@@ -361,7 +361,7 @@ parseInput doDup streams t = dup (toSignalStream t) : streams
 
 parseClock
   :: [SignalStream]
-  -> CS.Clock dom gated
+  -> CS.Clock dom enabled
   -> [SignalStream]
 parseClock streams _clk = (cycle [[0],[1]]) : streams
 
@@ -408,7 +408,7 @@ class CoSim r where
 instance {-# OVERLAPPABLE #-} CoSimType r => CoSim r where
     coSim b s = parseOutput b (coSimStart s)
 
-instance {-# OVERLAPPING #-} (CoSim r) => CoSim (CS.Clock dom 'CS.Source -> r) where
+instance {-# OVERLAPPING #-} (CoSim r) => CoSim (CS.Clock dom 'CS.Regular -> r) where
     coSim _ s streams = coSim True s . parseClock streams
 
 instance {-# OVERLAPPING #-} (CoSimType t, CoSim r) => CoSim (t -> r) where
@@ -418,6 +418,6 @@ class CoSimType t where
     toSignalStream   :: t -> SignalStream
     fromSignalStream :: SignalStream -> t
 
-instance (ClashType a, CP.Undefined a) => CoSimType (CP.Signal clk a) where
+instance (ClashType a, CP.KnownDomain tag dom) => CoSimType (CP.Signal tag a) where
     toSignalStream   = map (wordPack . CP.pack) . CP.sample
     fromSignalStream = CP.fromList . map (CP.unpack . wordUnpack)
diff --git a/tests/CoSimTest.hs b/tests/CoSimTest.hs
index 0117e5d..b6591ab 100644
--- a/tests/CoSimTest.hs
+++ b/tests/CoSimTest.hs
@@ -43,7 +43,7 @@ fir
      , KnownNat n
      , SaturatingNum a
      )
-  => Clock d Source
+  => Clock d Regular
   -> Reset d Asynchronous
   -> Vec (n + 1) a
   -> Signal d a
@@ -54,7 +54,7 @@ fir clk rst coeffs x_t = y_t
     xs = window clk rst x_t
 
 topEntity
-  :: Clock System Source
+  :: Clock System Regular
   -> Reset System Asynchronous
   -> Signal System (Signed 64)
   -> Signal System (Signed 64)
@@ -62,7 +62,7 @@ topEntity clk rst s = verilog_mult s s
 
 
 testInput
-    :: Clock System Source
+    :: Clock System Regular
     -> Reset System Asynchronous
     -> Signal System (Signed 64)
 testInput clk rst = stimuliGenerator clk rst (2:>3:>4:>8:>9:>10:>Nil)
